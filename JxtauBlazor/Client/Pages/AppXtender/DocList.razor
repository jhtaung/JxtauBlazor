@page "/ax-doc-list"
@inject HttpClient client
@inject IJSRuntime js

<MudContainer Class="mt-5" MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h5" GutterBottom="true">AX Doc List</MudText>

    @if (isLoading)
    {
        <MudText Typo="Typo.body2" GutterBottom="true">
            Loading...
        </MudText>
    } 
    else if (fileList.Count == 0)
    {
        <MudText Typo="Typo.body2" GutterBottom="true">
            No records found.
        </MudText>
    }
    else
    {
        <MudTable 
            Class="mb-5"
            Items="@fileList" 
            SortLabel="Sort By" 
            Dense="@true" 
            Hover="@true" 
            Bordered="@true" 
            Striped="@true"
            RowsPerPage="25">
            <ToolBarContent>
                <MudText Typo="Typo.h6">File List</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<FileDto, object>(x=>x.DateStr)">
                        Date
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<FileDto, object>(x=>x.Name)">
                        Name
                    </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Date">@context.DateStr</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@pageSizeOptions" />
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {
    private bool isLoading = false;
    private int[] pageSizeOptions = new int[] { 10, 25, 50, 100 };
    private List<FileDto> fileList = new List<FileDto>() { };

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var response = await client.GetFromJsonAsync<List<FileDto>>("api/appxtender");
        fileList = response!;

        // await js.InvokeVoidAsync("console.log", fileList);
        // var fileList = await client.GetFromJsonAsync<List<string>>("api/appxtender");
        // Console.WriteLine(response);
        
        isLoading = false;
    }
}
